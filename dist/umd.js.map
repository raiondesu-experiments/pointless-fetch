{"version":3,"file":"umd.js","sources":["../src/util.ts","../src/merge.ts","../src/request.ts","../src/methods.ts","../src/suburl.ts","../src/fetch.ts","../src/query.ts"],"sourcesContent":["export const joinUrls = (...urls: Array<string | undefined>) => urls\n  .filter(_ => _)\n  .join('/')\n  .replace(\n    /^(?:\\w+:\\/\\/)?(.*\\/+.+)/g,\n    (_, $1) => _.replace($1, $1.replace(/\\/+/g, '/'))\n  );\n\nexport const isBase = (url: string) => /^(\\w+:\\/\\/.+|\\/\\/)/.test(url);\n","import { isBase, joinUrls } from './util';\n\nexport const defaultMerge = (v1: unknown, v2: unknown) => (\n  typeof v1 === typeof v2\n    ? Array.isArray(v1) && Array.isArray(v2)\n        ? v1.concat(v2)\n      : typeof v1 === 'object' && (!Array.isArray(v1) && !Array.isArray(v2))\n        ? { ...v1, ...v2 as object }\n    : v2\n  : v2\n);\n\nexport const mergeUrls = (url1: string, url2: string) => isBase(url2) ? url2 : joinUrls(url1, url2);\n\nexport function mergeHeaders(headers1?: HeadersInit, headers2?: HeadersInit) {\n  const h = new Headers(headers1);\n  const h2 = new Headers(headers2);\n\n  h2.forEach((v, k) => h.append(k, v));\n\n  return h;\n}\n","import { mergeHeaders, mergeUrls, defaultMerge } from './merge';\n\nexport type TRequest =\n  | RequestInit & { url: string }\n  | Request;\n\nexport const request = ({ url, ...init }: TRequest) => new Request(url, init);\n\nexport type TCombiner = {\n  (r: TRequest, addon: TRequest): Request;\n} & {\n  -readonly[key in keyof TRequest]?: (value1: TRequest[key], value2: TRequest[key]) => TRequest[key];\n};\n\n/**\n * Combines two Request configs using special merge strategies for each field.\n *\n * Each merge strategy is stored in a property with the same name\n * as the corresponding Request property\n * and can be replaced at any time.\n */\nexport const combine: TCombiner = (req1: TRequest, req2: TRequest) => request(\n  Object.keys(req1).concat(Object.keys(req2))\n  .reduce((res, key) => (\n    res[key] = (combine[key] || defaultMerge)(req1[key], req2[key]),\n    res\n  ), {} as TRequest)\n);\n\ncombine.headers = mergeHeaders;\ncombine.url = mergeUrls;\n","import { TRequest } from './request';\n\nexport type TRequestMethod =\n  | 'GET'\n  | 'HEAD'\n  | 'POST'\n  | 'PUT'\n  | 'DELETE'\n  | 'CONNECT'\n  | 'OPTIONS'\n  | 'TRAC';\n\nexport const method = (method: string) => (request: TRequest) => ({\n  ...request,\n  method,\n});\n\n/**\n * Sets request's method to `GET`.\n */\nexport const get = method('GET');\n\n/**\n * Sets request's method to `HEAD`.\n */\nexport const head = method('HEAD');\n\n/**\n * Sets request's method to `POST`.\n */\nexport const post = method('POST');\n\n/**\n * Sets request's method to `PUT`.\n */\nexport const put = method('PUT');\n\n/**\n * Sets request's method to `DELETE`.\n */\nexport const del = method('DELETE');\n\n/**\n * Sets request's method to `CONNECT`.\n */\nexport const connect = method('CONNECT');\n\n/**\n * Sets request's method to `OPTIONS`.\n */\nexport const options = method('OPTIONS');\n\n/**\n * Sets request's method to `TRAC`.\n */\nexport const trac = method('TRAC');\n","import { joinUrls } from './util';\n\nexport type TSubUrlFactory = string & {\n  (base: string): typeof subUrl;\n\n  <F extends (...args: any[]) => string>(\n    base: F\n  ): (\n    ...args: Parameters<F>\n  ) => typeof subUrl;\n\n  toString(): string;\n};\n\n/**\n * Creates a sub-url factory\n *\n * Example usage:\n *\n * ```ts\n *  const myBlog = subUrl('https://my-blog.com');\n *  // result:\n *  'https://my-blog.com'\n *\n *  const user = myBlog('user');\n *  // result:\n *  'https://my-blog.com/user'\n *\n *  const userPost = user((userId: number, postId: number) => `${userId}/post/${postId}`);\n *  // result:\n *  (userId: number, postId: number) => 'https://my-blog.com/user/${userId}/post/${postId}'\n * ```\n */\nexport const subUrl = <TSubUrlFactory> function (\n  this: { base?: string },\n  url: string | ((...args: any[]) => string)\n) {\n  const applyBase = (\n    _url: (...args: any[]) => string\n  ) => (...args: any[]) => {\n    const concat = () => joinUrls(this?.base, _url(...args));\n\n    const _subUrl = subUrl.bind({ base: concat() });\n    _subUrl.toString = concat;\n\n    return _subUrl;\n  };\n\n  return typeof url === 'string'\n    ? applyBase(() => url)()\n    : applyBase(url);\n};\n\nsubUrl.toString = () => '';\n","import { TRequest, combine } from './request';\n\nexport const createFetch = <T, E = void>(\n  request: TRequest,\n  after: (res: Response) => T,\n  error: (e: any) => E\n) => (\n  finalRequest: TRequest = { url: '' }\n) => fetch(combine(request, finalRequest)).then(after, error);\n","/**\n * Encodes an object into the plain URL as url-query-string\n *\n * ```js\n *  query('/list', {\n *    amount: 5,\n *    filters: ['price', 'date']\n *  })\n * ```\n *\n * returns\n * ```js\n *  '/list?amount=5&filters=price,date'\n * ```\n *\n * @param url a url to encode params into\n * @param queryParams query params in object form\n * @returns url with encoded params\n */\nexport const query = (url: string) => (queryParams: Record<PropertyKey, any>) => {\n  const query = Object.keys(queryParams)\n    .filter(k => k && queryParams[k] !== undefined)\n    .map((k): [string, string] =>\n      Array.isArray(queryParams[k])\n        ? [k, queryParams[k].join(',')]\n      : typeof queryParams[k] === 'object'\n        ? [k, JSON.stringify(queryParams[k])]\n      : [k, queryParams[k]]\n    )\n    .map(([key, value]) => `${encodeURIComponent(key)}=${encodeURI(value)}`)\n    .join('&');\n\n  const prefix = (String(url).indexOf('?') > -1 ? '&' : '?');\n\n  return url + (query.length > 0 ? prefix + query : '');\n};\n"],"names":["joinUrls","urls","filter","_","join","replace","$1","defaultMerge","v1","v2","_typeof","Array","isArray","concat","mergeUrls","url1","url2","test","mergeHeaders","headers1","headers2","h","Headers","forEach","v","k","append","request","url","init","Request","combine","req1","req2","Object","keys","reduce","res","key","headers","method","get","head","post","put","del","connect","options","trac","subUrl","applyBase","_url","args","_this","base","_subUrl","bind","toString","after","error","finalRequest","fetch","then","queryParams","query","undefined","map","JSON","stringify","value","encodeURIComponent","encodeURI","prefix","String","indexOf","length"],"mappings":"qxCAAO,IAAMA,EAAW,sCAAIC,2BAAAA,yBAAoCA,EAC7DC,OAAO,SAAAC,UAAKA,IACZC,KAAK,KACLC,QACC,2BACA,SAACF,EAAGG,UAAOH,EAAEE,QAAQC,EAAIA,EAAGD,QAAQ,OAAQ,SCHnCE,EAAe,SAACC,EAAaC,UACxCC,EAAOF,OAAcC,GACjBE,MAAMC,QAAQJ,IAAOG,MAAMC,QAAQH,GAC/BD,EAAGK,OAAOJ,GACE,WAAdC,EAAOF,IAAqBG,MAAMC,QAAQJ,IAAQG,MAAMC,QAAQH,GAElEA,mBADSD,KAAOC,GAElBA,GAGSK,EAAY,SAACC,EAAcC,SDJD,qBAAqBC,KCIID,GAAQA,EAAOhB,EAASe,EAAMC,aAE9EE,EAAaC,EAAwBC,OAC7CC,EAAI,IAAIC,QAAQH,UACX,IAAIG,QAAQF,GAEpBG,QAAQ,SAACC,EAAGC,UAAMJ,EAAEK,OAAOD,EAAGD,KAE1BH,MCdIM,EAAU,gBAAGC,IAAAA,IAAQC,sBAAqB,IAAIC,QAAQF,EAAKC,IAe3DE,EAAqB,SAArBA,EAAsBC,EAAgBC,UAAmBN,EACpEO,OAAOC,KAAKH,GAAMnB,OAAOqB,OAAOC,KAAKF,IACpCG,OAAO,SAACC,EAAKC,UACZD,EAAIC,IAAQP,EAAQO,IAAQ/B,GAAcyB,EAAKM,GAAML,EAAKK,IAC1DD,GACC,MAGLN,EAAQQ,QAAUrB,EAClBa,EAAQH,IAAMd,MClBD0B,EAAS,SAACA,UAAmB,SAACb,2BACtCA,GACHa,OAAAA,MAMWC,EAAMD,EAAO,OAKbE,EAAOF,EAAO,QAKdG,EAAOH,EAAO,QAKdI,EAAMJ,EAAO,OAKbK,EAAML,EAAO,UAKbM,EAAUN,EAAO,WAKjBO,EAAUP,EAAO,WAKjBQ,EAAOR,EAAO,QCtBdS,EAA0B,SAA1BA,EAEXrB,cAEMsB,EAAY,SAChBC,UACG,sCAAIC,2BAAAA,sBACDvC,EAAS,wBAAMb,YAASqD,wBAAMC,KAAMH,eAAQC,KAE5CG,EAAUN,EAAOO,KAAK,CAAEF,KAAMzC,aACpC0C,EAAQE,SAAW5C,EAEZ0C,UAGa,iBAAR3B,EACVsB,EAAU,kBAAMtB,GAAhBsB,GACAA,EAAUtB,IAGhBqB,EAAOQ,SAAW,iBAAM,0CCnDG,SACzB9B,EACA+B,EACAC,UACG,eACHC,yDAAyB,CAAEhC,IAAK,WAC7BiC,MAAM9B,EAAQJ,EAASiC,IAAeE,KAAKJ,EAAOC,8HCWlC,SAAC/B,UAAgB,SAACmC,OAC/BC,EAAQ9B,OAAOC,KAAK4B,GACvB7D,OAAO,SAAAuB,UAAKA,QAAwBwC,IAAnBF,EAAYtC,KAC7ByC,IAAI,SAACzC,UACJd,MAAMC,QAAQmD,EAAYtC,IACtB,CAACA,EAAGsC,EAAYtC,GAAGrB,KAAK,MACA,WAA1BM,EAAOqD,EAAYtC,IACjB,CAACA,EAAG0C,KAAKC,UAAUL,EAAYtC,KACjC,CAACA,EAAGsC,EAAYtC,MAEnByC,IAAI,yBAAE5B,OAAK+B,uBAAcC,mBAAmBhC,eAAQiC,UAAUF,MAC9DjE,KAAK,KAEFoE,EAAUC,OAAO7C,GAAK8C,QAAQ,MAAQ,EAAI,IAAM,WAE/C9C,GAAOoC,EAAMW,OAAS,EAAIH,EAASR,EAAQ"}