{"version":3,"file":"umd.js","sources":["../src/url.ts","../src/request.ts"],"sourcesContent":["export const join = (parts: Array<string | undefined>) => parts\n  .filter(_ => _)\n  .join('/')\n  .replace(\n    /^(?:\\w+:\\/\\/)?(.*\\/+.+)/g,\n    (_, $1) => _.replace($1, $1.replace(/\\/+/g, '/'))\n  );\n\n/**\n * Creates a sub-url factory\n *\n * Example usage\n *\n * ```ts\n *  const myBlog = subUrl('https://my-blog.com');\n *  'https://my-blog.com'\n *\n *  const user = myBlog('user');\n *  'https://my-blog.com/user'\n *\n *  const userPost = user((id: number) => `${id}/post`);\n *  (id: number) => 'https://my-blog.com/user/${id}/post'\n * ```\n */\nexport const subUrl = function (\n  this: { base?: string },\n  url: string | ((...args: any[]) => string)\n) {\n  const applyBase = (\n    _url: (...args: any[]) => string\n  ) => (...args: any[]) => {\n    const concat = () => join([this.base, _url(...args)]);\n\n    const _subUrl = subUrl.bind({ base: concat() });\n    _subUrl.toString = concat;\n\n    return _subUrl;\n  };\n\n  return typeof url === 'string'\n    ? applyBase(() => url)()\n    : applyBase(url);\n} as string & {\n  (base: string): typeof subUrl;\n\n  <F extends (...args: any[]) => string>(\n    base: F\n  ): (\n    ...args: Parameters<F>\n  ) => typeof subUrl;\n\n  toString(): string;\n};\n\nsubUrl.toString = () => '';\n\n/**\n * Encodes an object into the plain URL as url-query-string\n *\n * ```js\n *  query('/list', {\n *    amount: 5,\n *    filters: ['price', 'date']\n *  })\n * ```\n *\n * returns\n * ```js\n *  '/list?amount=5&filters=price,date'\n * ```\n *\n * @param url a url to encode params into\n * @param queryParams query params in object form\n * @returns url with encoded params\n */\nexport function query(url: string, queryParams: object) {\n  const query = Object.keys(queryParams)\n    .filter(k => k && queryParams[k] !== undefined)\n    .map((k): [string, string] => {\n      if (Array.isArray(queryParams[k])) {\n        return [queryParams[k].join(','), k];\n      } else if (typeof queryParams[k] === 'object') {\n        return [JSON.stringify(queryParams[k]), k];\n      }\n\n      return [queryParams[k], k];\n    })\n    .map(([value, key]) => `${encodeURIComponent(key)}=${encodeURI(value)}`)\n    .join('&');\n\n  const prefix = (url.indexOf('?') > -1 ? '&' : '?');\n\n  return url + (query.length > 0 ? prefix + query : '');\n}\n","export type TRequest = RequestInit & { url: string };\n\nexport const request = ({ url, ...init }: TRequest) => new Request(url, init);\n"],"names":["subUrl","url","applyBase","_url","args","concat","_this","base","filter","_","join","replace","$1","_subUrl","bind","toString","queryParams","query","Object","keys","k","undefined","map","Array","isArray","_typeof","JSON","stringify","value","key","encodeURIComponent","encodeURI","prefix","indexOf","length","init","Request"],"mappings":"yxCAwBaA,EAAS,SAATA,EAEXC,cAEMC,EAAY,SAChBC,UACG,sCAAIC,2BAAAA,sBACDC,EAAS,iBAAW,CAACC,EAAKC,KAAMJ,eAAQC,IA9B/CI,OAAO,SAAAC,UAAKA,IACZC,KAAK,KACLC,QACC,2BACA,SAACF,EAAGG,UAAOH,EAAEE,QAAQC,EAAIA,EAAGD,QAAQ,OAAQ,SA4BtCE,EAAUb,EAAOc,KAAK,CAAEP,KAAMF,aACpCQ,EAAQE,SAAWV,EAEZQ,UAGa,iBAARZ,EACVC,EAAU,kBAAMD,GAAhBC,GACAA,EAAUD,IAahBD,EAAOe,SAAW,iBAAM,qBAqBFd,EAAae,OAC3BC,EAAQC,OAAOC,KAAKH,GACvBR,OAAO,SAAAY,UAAKA,QAAwBC,IAAnBL,EAAYI,KAC7BE,IAAI,SAACF,UACAG,MAAMC,QAAQR,EAAYI,IACrB,CAACJ,EAAYI,GAAGV,KAAK,KAAMU,GACC,WAA1BK,EAAOT,EAAYI,IACrB,CAACM,KAAKC,UAAUX,EAAYI,IAAKA,GAGnC,CAACJ,EAAYI,GAAIA,KAEzBE,IAAI,yBAAEM,OAAOC,uBAAYC,mBAAmBD,eAAQE,UAAUH,MAC9DlB,KAAK,KAEFsB,EAAU/B,EAAIgC,QAAQ,MAAQ,EAAI,IAAM,WAEvChC,GAAOgB,EAAMiB,OAAS,EAAIF,EAASf,EAAQ,eC1F7B,gBAAGhB,IAAAA,IAAQkC,sBAAqB,IAAIC,QAAQnC,EAAKkC"}